# -*- coding: utf-8 -*-
"""Tomato_Disease_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1whDxrxRJZ8qBIq95ssfRU1-BlDOtODsT
"""

!pip install opendatasets
!pip install opencv-python

import opendatasets as od
od.download('https://www.kaggle.com/datasets/arjuntejaswi/plant-village')

import tensorflow as tf
from tensorflow import keras
from keras import models,layers
import matplotlib.pyplot as plt
import cv2

dataset = tf.keras.preprocessing.image_dataset_from_directory(
    "/content/plant-village/PlantVillage/Tomato",
    shuffle = True,
    image_size=(256,256),
    batch_size=32,
)

class_names = dataset.class_names
print(class_names)
classes = len(class_names)
print(classes)

plt.figure(figsize=(10,10))
for image_batch,label_batch in dataset.take(1):
  for i in range(9):
   ax = plt.subplot(3,3,i+1)
   plt.imshow(image_batch[i].numpy().astype("uint8"))
   plt.axis('off')
   plt.title(class_names[label_batch[i]])
   # print(image_batch.shape)
   # print(label_batch.numpy())

# 80% ==> training
# 20% ==> 10% validation, 10% test

def get_datasets(dataset,train_split=0.8,valid_split = 0.1,test_split = 0.1,shuffle=True,shuffleSize = 10000):
  if shuffle:
    dataset = dataset.shuffle(shuffle,seed = 12)
  train_size =int(0.8*len(dataset))
  val_size = int(0.1*len(dataset))
  train_ds = dataset.take(train_size)
  val_ds = dataset.skip(train_size).take(val_size)
  test_ds = dataset.skip(train_size).skip(val_size)
  return train_ds,val_ds,test_ds

train_ds,val_ds,test_ds = get_datasets(dataset)
len(train_ds)

"""cache is done so that it doesn't load data on each epochs"""

train_ds = train_ds.cache()
val_ds = val_ds.cache()
test_ds = test_ds.cache()

"""  Below is a layer to Resize and Rescale the image(if we give image to predict then it will be resized and scaled by the below layer.)"""

img_scale_layer = tf.keras.Sequential([
    tf.keras.layers.experimental.preprocessing.Resizing(256,256),
    tf.keras.layers.experimental.preprocessing.Rescaling(1.0/255)
])

"""Apply Data Augmentation"""

data_augmentation = tf.keras.Sequential([
    tf.keras.layers.experimental.preprocessing.RandomFlip("horizontal_and_vertical"),
    tf.keras.layers.experimental.preprocessing.RandomRotation(0.2)
])

"""Convolutional layer model"""

model = models.Sequential([
    img_scale_layer,
    data_augmentation,
    layers.Conv2D(32,(3,3),activation = 'relu',input_shape = (32,256,256,3)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64,(3,3),activation = 'relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64,(3,3),activation = 'relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64,(3,3),activation = 'relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64,(3,3),activation = 'relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64,(3,3),activation = 'relu'),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(64,activation = 'relu'),
    layers.Dense(classes,activation='softmax'),
])

model.build(input_shape = (32,256,256,3))

model.summary()

model.compile(
    optimizer = 'adam',
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),
    metrics = ['accuracy']
)

history = model.fit(
    train_ds,
    epochs = 10,
    batch_size = 32,
    verbose=1,
    validation_data=val_ds
)

scores = model.evaluate(test_ds)

scores

history.params

history.history.keys()

train_accu = history.history['accuracy']
val_accu = history.history['val_accuracy']

train_loss = history.history['loss']
val_loss = history.history['val_loss']

plt.figure(figsize = (8,4))
plt.subplot(1,2,1)
plt.plot(range(25),train_accu,label = 'Training Accuracy')
plt.plot(range(25),val_accu,label = 'Validation Accuracy')
plt.legend(loc = 'lower right')
plt.title('Training and Validation Accuracy')

plt.figure(figsize = (8,4))
plt.subplot(1,2,1)
plt.plot(range(25),train_loss,label = 'Training Loss')
plt.plot(range(25),val_loss,label = 'Validation Loss')
plt.legend(loc = 'lower right')
plt.title('Training and Validation Loss')

import numpy as np
for images_batch,labels_batch in test_ds.take(1):

  first_image = images_batch[0].numpy().astype('uint8')
  first_label = labels_batch[0].numpy()

  print("first image to predict")
  plt.imshow(first_image)
  print("actual label:",class_names[first_label])

  batch_predict = model.predict(images_batch)
  print("predicted label:",class_names[np.argmax(batch_predict[0])])